# This workflow deploys AWS CloudFormation infrastructure defined in exploration2-stack.yml
# It is separate from the application deployment workflow.
name: Deploy Infrastructure Stack (CloudFormation)

on:
  # Allows manual triggering from the GitHub Actions UI
  workflow_dispatch:

  # Triggers on pushes to the main branch, but ONLY if the exploration2-stack.yml file changes
  push:
    branches:
      - main
    paths:
      - 'exploration2-stack.yml' # Adjust path if your file is in a subdirectory

jobs:
  deploy_cloudformation:
    name: Deploy CloudFormation Stack
    runs-on: ubuntu-latest
    # Use an environment where your AWS secrets are stored
    environment: production # Or create a dedicated 'infrastructure' environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Configure AWS credentials using secrets stored in the specified environment
      # Ensure AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION,
      # and potentially AWS_SESSION_TOKEN are configured as secrets.
      - name: Configure AWS Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # IMPORTANT: Set this to your target AWS region
          AWS_DEFAULT_REGION: us-east-1
          # Optional: If using temporary credentials via STS AssumeRole etc.
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          echo "AWS Credentials configured for region $AWS_DEFAULT_REGION"
          aws sts get-caller-identity # Verify credentials work

      - name: Set up CloudFormation variables
        id: cf_vars
        run: |
          # Define your CloudFormation stack name here
          STACK_NAME="exploration2-stack"
          # Generate a unique name for the change set using GitHub context
          CHANGESET_NAME="changeset-${{ github.run_id }}-${{ github.sha }}"
          # Set environment variables for use in subsequent steps
          echo "STACK_NAME=${STACK_NAME}" >> $GITHUB_ENV
          echo "CHANGESET_NAME=${CHANGESET_NAME}" >> $GITHUB_ENV
          echo "CloudFormation Stack Name: ${STACK_NAME}"
          echo "CloudFormation Changeset Name: ${CHANGESET_NAME}"

      - name: Create CloudFormation Change Set
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1 # Match region above
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} # Optional
        run: |
          aws cloudformation create-change-set \
            --stack-name ${{ env.STACK_NAME }} \
            --change-set-name ${{ env.CHANGESET_NAME }} \
            --template-body file://exploration2-stack.yml \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            # Add other capabilities (e.g., CAPABILITY_AUTO_EXPAND) if required by your template.
            # If your template needs parameters, add them here like this:
            # --parameters ParameterKey=YourParamKey,ParameterValue=YourParamValue ParameterKey=AnotherKey,ParameterValue=AnotherValue
          echo "Change set creation initiated."

      - name: Wait for Change Set creation to complete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1 # Match region above
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} # Optional
        run: |
          echo "Waiting for change set ${{ env.CHANGESET_NAME }} to be created..."
          aws cloudformation wait change-set-create-complete \
            --stack-name ${{ env.STACK_NAME }} \
            --change-set-name ${{ env.CHANGESET_NAME }}
          echo "Change set created successfully."

      - name: Describe Change Set (Optional - for review in logs)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1 # Match region above
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} # Optional
        run: |
          echo "Review the following proposed changes:"
          aws cloudformation describe-change-set \
            --stack-name ${{ env.STACK_NAME }} \
            --change-set-name ${{ env.CHANGESET_NAME }} \
            --query 'Changes' --output table # Use --output json for full details

      - name: Execute CloudFormation Change Set
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1 # Match region above
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} # Optional
        run: |
          echo "Executing change set ${{ env.CHANGESET_NAME }}..."
          aws cloudformation execute-change-set \
            --stack-name ${{ env.STACK_NAME }} \
            --change-set-name ${{ env.CHANGESET_NAME }}
          echo "Change set execution initiated. Stack update/creation is in progress."

      # Optional: Uncomment this step to make the workflow wait until the stack update finishes.
      # - name: Wait for Stack Update Completion
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_DEFAULT_REGION: us-east-1 # Match region above
      #     AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} # Optional
      #   run: |
      #     echo "Waiting for stack update/create to complete..."
      #     aws cloudformation wait stack-update-complete --stack-name ${{ env.STACK_NAME }}
      #     # Or use stack-create-complete if only creating new stacks
      #     # aws cloudformation wait stack-create-complete --stack-name ${{ env.STACK_NAME }}
      #     echo "Stack update/create completed successfully."